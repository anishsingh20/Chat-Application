#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatapp:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);
console.log('Server Running Successfully');

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var socket = require('socket.io');
var io =  socket(server);

var user =  [] ;
var connections = [] ;


io.sockets.on('connection',function(socket) {
  //pushing or appending the sockets to the connections array
    connections.push(socket);
    console.log('Connected :' + " "  + connections.length +  " " + "Users");


    socket.on('disconnect',function(data) {
      //disconnect sockets
      //arr_name.splice(index_of_element,1//no of element ot delete) to delete elements from array

      user.splice(user.indexOf(socket.username) ,1);
      updateUsernames();

      connections.splice(connections.indexOf(socket),1);
      console.log('Disconnected 1 socket  |  %s sockets Connected ',connections.length);

    });

    //send message
    socket.on('send message', function(data) {

      io.sockets.emit('new message', { msg:data , user:socket.username } );
      console.log("user : " + socket.username + " " + "says :" + " " + data);

    });

    //new user
    socket.on('new user',function(data,callback){
            callback(true);
            socket.username = data;
            user.push(socket.username);


            updateUsernames();
    });

    function updateUsernames() {
      io.sockets.emit('get users', user );
    };

});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
